[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "perform_search",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "scrape_article",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "GenerateArticleRequest",
        "kind": 6,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "class GenerateArticleRequest(BaseModel):\n    query: str\ndef summarize_text(full_text: str, query: str) -> str:\n    \"\"\"Riassume il testo estratto in ~300 token per ridurre il contesto.\"\"\"\n    if len(full_text) > 2000:\n        full_text = full_text[:2000]\n    prompt_summary = (\n        f\"Riassumi in modo completo, chiaro e conciso il seguente testo relativo a '{query}'. \"\n        \"Fornisci un riassunto dettagliato in non più di 300 token, includendo le informazioni chiave \"\n        \"ma senza citare fonti o URL. Deve essere un testo informativo che coglie i punti salienti.\\n\\n\"",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "summarize_text",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def summarize_text(full_text: str, query: str) -> str:\n    \"\"\"Riassume il testo estratto in ~300 token per ridurre il contesto.\"\"\"\n    if len(full_text) > 2000:\n        full_text = full_text[:2000]\n    prompt_summary = (\n        f\"Riassumi in modo completo, chiaro e conciso il seguente testo relativo a '{query}'. \"\n        \"Fornisci un riassunto dettagliato in non più di 300 token, includendo le informazioni chiave \"\n        \"ma senza citare fonti o URL. Deve essere un testo informativo che coglie i punti salienti.\\n\\n\"\n        f\"Testo:\\n{full_text}\\n\\nRiassunto:\"\n    )",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def read_root():\n    logger.info(\"Root endpoint accessed\")\n    return {\"message\": \"Hello World from FastAPI!\"}\n@app.get(\"/search\")\ndef search_endpoint(query: str):\n    if not query.strip():\n        logger.warning(\"Empty query received in /search endpoint\")\n        raise HTTPException(status_code=400, detail=\"La query di ricerca non può essere vuota.\")\n    logger.info(f\"Search endpoint called with query: {query}\")\n    try:",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "search_endpoint",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def search_endpoint(query: str):\n    if not query.strip():\n        logger.warning(\"Empty query received in /search endpoint\")\n        raise HTTPException(status_code=400, detail=\"La query di ricerca non può essere vuota.\")\n    logger.info(f\"Search endpoint called with query: {query}\")\n    try:\n        data = perform_search(query)\n        return data\n    except Exception as e:\n        logger.error(f\"Search failed: {e}\")",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "generate_article",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def generate_article(payload: GenerateArticleRequest):\n    query = payload.query.strip()\n    if not query:\n        logger.warning(\"Empty query received\")\n        raise HTTPException(status_code=400, detail=\"La query di ricerca non può essere vuota.\")\n    logger.info(f\"generate_article endpoint called with query: {query}\")\n    try:\n        search_results = perform_search(query=query)\n    except Exception as e:\n        logger.error(f\"Error during search: {e}\")",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\nload_dotenv()\napp = FastAPI()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nGOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nif not OPENAI_API_KEY:\n    logger.error(\"OPENAI_API_KEY non impostata.\")\n    raise RuntimeError(\"OPENAI_API_KEY non impostata.\")\nif not GOOGLE_API_KEY or not GOOGLE_CSE_ID:",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nGOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nif not OPENAI_API_KEY:\n    logger.error(\"OPENAI_API_KEY non impostata.\")\n    raise RuntimeError(\"OPENAI_API_KEY non impostata.\")\nif not GOOGLE_API_KEY or not GOOGLE_CSE_ID:\n    logger.error(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\n    raise RuntimeError(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nGOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nif not OPENAI_API_KEY:\n    logger.error(\"OPENAI_API_KEY non impostata.\")\n    raise RuntimeError(\"OPENAI_API_KEY non impostata.\")\nif not GOOGLE_API_KEY or not GOOGLE_CSE_ID:\n    logger.error(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\n    raise RuntimeError(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\nopenai.api_key = OPENAI_API_KEY",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "GOOGLE_API_KEY",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "GOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nGOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nif not OPENAI_API_KEY:\n    logger.error(\"OPENAI_API_KEY non impostata.\")\n    raise RuntimeError(\"OPENAI_API_KEY non impostata.\")\nif not GOOGLE_API_KEY or not GOOGLE_CSE_ID:\n    logger.error(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\n    raise RuntimeError(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\nopenai.api_key = OPENAI_API_KEY\napp.add_middleware(",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CSE_ID",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "GOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nif not OPENAI_API_KEY:\n    logger.error(\"OPENAI_API_KEY non impostata.\")\n    raise RuntimeError(\"OPENAI_API_KEY non impostata.\")\nif not GOOGLE_API_KEY or not GOOGLE_CSE_ID:\n    logger.error(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\n    raise RuntimeError(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\nopenai.api_key = OPENAI_API_KEY\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "openai.api_key = OPENAI_API_KEY\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nclass GenerateArticleRequest(BaseModel):\n    query: str",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "is_domain_excluded",
        "kind": 2,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "def is_domain_excluded(url: str) -> bool:\n    domain = urlparse(url).netloc.lower()\n    for excluded in EXCLUDED_DOMAINS:\n        if excluded in domain:\n            return True\n    return False\ndef perform_search(query: str):\n    logger.debug(f\"Performing Google search for query: {query}\")\n    if not GOOGLE_API_KEY or not GOOGLE_CSE_ID:\n        raise RuntimeError(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "perform_search",
        "kind": 2,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "def perform_search(query: str):\n    logger.debug(f\"Performing Google search for query: {query}\")\n    if not GOOGLE_API_KEY or not GOOGLE_CSE_ID:\n        raise RuntimeError(\"GOOGLE_API_KEY o GOOGLE_CSE_ID non impostate.\")\n    url = \"https://www.googleapis.com/customsearch/v1\"\n    params = {\n        \"key\": GOOGLE_API_KEY,\n        \"cx\": GOOGLE_CSE_ID,\n        \"q\": query,\n    }",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "scrape_article",
        "kind": 2,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "def scrape_article(url: str) -> str:\n    logger.debug(f\"Scraping article from URL: {url}\")\n    # Rimuovo eventuali due punti finali o spazi\n    url = url.rstrip(\":\")\n    headers = {\n        \"User-Agent\": (\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n                       \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n                       \"Chrome/58.0.3029.110 Safari/53.36\")\n    }\n    try:",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nload_dotenv()\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nGOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nEXCLUDED_DOMAINS = [\n    \"tripadvisor.com\",\n    \"reddit.com\",\n    \"openstreetmap.org\",\n    \"youtube.com\",\n    \"facebook.com\",",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "GOOGLE_API_KEY",
        "kind": 5,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "GOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nGOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nEXCLUDED_DOMAINS = [\n    \"tripadvisor.com\",\n    \"reddit.com\",\n    \"openstreetmap.org\",\n    \"youtube.com\",\n    \"facebook.com\",\n    \"twitter.com\",\n    \"instagram.com\",",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CSE_ID",
        "kind": 5,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "GOOGLE_CSE_ID = os.getenv(\"GOOGLE_CSE_ID\")\nEXCLUDED_DOMAINS = [\n    \"tripadvisor.com\",\n    \"reddit.com\",\n    \"openstreetmap.org\",\n    \"youtube.com\",\n    \"facebook.com\",\n    \"twitter.com\",\n    \"instagram.com\",\n]",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "EXCLUDED_DOMAINS",
        "kind": 5,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "EXCLUDED_DOMAINS = [\n    \"tripadvisor.com\",\n    \"reddit.com\",\n    \"openstreetmap.org\",\n    \"youtube.com\",\n    \"facebook.com\",\n    \"twitter.com\",\n    \"instagram.com\",\n]\ndef is_domain_excluded(url: str) -> bool:",
        "detail": "backend.utils",
        "documentation": {}
    }
]